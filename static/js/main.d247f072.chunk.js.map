{"version":3,"sources":["movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","src_movie_0","title_english","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UAiCA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,EAAhC,KAqBOC,MAvDf,SAAAC,GAAiD,IAAjCN,EAAiCM,EAAjCN,MAAON,EAA0BY,EAA1BZ,OAAQa,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACfL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAElCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mBACbL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC4CbC,6MAxDbC,MAAQ,KAOPC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAESC,EAAKC,WAFd,OAENP,EAFMG,EAAAK,KAIZF,EAAKG,SAAS,CACZT,WALU,wBAAAG,EAAAO,SAAAX,QASdQ,SAAW,WAQT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,SACvBgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAI5BG,cAAgB,WAWd,OAVed,EAAKT,MAAMG,OAAOb,IAAI,SAACkC,GAEpC,OADAH,QAAQC,IAAIE,GACL/C,EAAAC,EAAAC,cAAC8C,EAAD,CACL5C,MAAO2C,EAAME,cACbnD,OAAQiD,EAAMG,mBACdnC,IAAKgC,EAAMI,GACXxC,OAAQoC,EAAMpC,OACdC,SAAUmC,EAAMnC,iGApCpBwC,KAAK5B,8CA0CC,IACCE,EAAU0B,KAAK7B,MAAfG,OACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAC9B0B,KAAK7B,MAAMG,OAAU0B,KAAKN,gBAAkB,kBAtDnCO,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.d247f072.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './movie.css';\r\nimport { symbols } from 'ansi-colors';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n            <MoviePoster poster={poster} alt={title}/>\r\n            </div>  \r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\r\n                </div>\r\n                <p className=\"Moive__Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />    \r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n    );\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Gerne\">{genre} </span>\r\n    );\r\n}\r\n\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.shape.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;\r\n\r\n\r\n/*\r\n    [ Functional Component VS Class Component ]\r\n\r\n    1. Class Component\r\n        - componentDidMount, getDerivedStateFromProps등의 React Component의 라이프사이클을 정의해서 사용\r\n        \r\n    2.  Functional Component\r\n        - 라이프사이클은 사용할 수 없으며 온전히 render함수만 정의\r\n        - Class Component에 비해 성능이 좋고 가독성, 테스트가 용이\r\n        - 말그대로 함수형 컴포넌트이기에 함수형 프로그래밍의 장점을 활용\r\n        - React 16.8 버전부터 Functional Component에서 state와 라이프사이클을 사용할 수 있는 Hook이라는 개념이 등장\r\n        - Hook은 state와 componentDidMount, componentDidUpdate, componentWillMount 세 가지 라이프사이클만 구현\r\n\r\n    - https://boxfoxs.tistory.com/395\r\n    - https://medium.com/@minoo/react-stateless-functional-components-%EC%9A%B0%EB%A6%AC%EA%B0%80-%EA%B0%84%EA%B3%BC%ED%95%98%EA%B3%A0-%EC%9E%88%EB%8A%94-9%EA%B0%80%EC%A7%80-ecef2ef73d79\r\n*/ \r\n\r\n// 1. Class Component \r\n/*\r\nclass MoviePoster extends Component {\r\n    static propTypes = {\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <img src={this.props.poster} alt=\"Movie Poster\"/>\r\n        );\r\n    }\r\n     \r\n}\r\n*/\r\n// 2. Functional Component : 위와 같이 출력됨, tate/redner/life cycle없음, 온리 props, 단순 return","import React, { Component }from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Movie from './movie';\r\n\r\n\r\n// map을 이용할 때는 index 가 필수\r\nclass App extends Component {\r\n\r\n  // Render Flow : componentWillMount() => render() => componentDidMount()\r\n  // Update Flow : componentWillReceiveProps() => shouldComponentUpdate() old props과 new props가 다르면 true 반환함 => render() => compoenentDidMount()\r\n\r\n  state = {}\r\n\r\n  componentDidMount(){\r\n    this._getMovies()\r\n  \r\n  }\r\n\r\n   _getMovies = async () => {\r\n    // await : 뒤 함수가 끝날 때 까지 기다림, async와 함께 써야함\r\n    const movies = await this._callApi()\r\n    // 위의 _callApi()가 완료 된 후에 실행됨\r\n    this.setState({\r\n      movies\r\n    })\r\n  }\r\n\r\n  _callApi = () => {\r\n    // fetch : xml http request 를 간단히 해 불러올 수 있음, 모던 자바스크립에서 가능\r\n    /* \r\n      [ promise의 단계 ]\r\n      1. fetch :  ajax로 url 을 불러옴\r\n      2. then  :  불러온 것이 완료되면 실행됨\r\n      3. catch : fetch에서 에러가 있다면 실행됨\r\n     */\r\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\r\n    .then(response => response.json())\r\n    .then(json => json.data.movies )\r\n    .catch(err => console.log(err))\r\n    // response 체크 후,  json으로 변환하고, 콘솔로 봄\r\n  }\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map((movie) => {  \r\n      console.log(movie)    \r\n      return <Movie \r\n        title={movie.title_english}\r\n        poster={movie.medium_cover_image}\r\n        key={movie.id}\r\n        genres={movie.genres}\r\n        synopsis={movie.synopsis}\r\n        />\r\n    })\r\n    return movies\r\n  }\r\n\r\n  render(){\r\n    const {movies} = this.state;\r\n    return (\r\n      <div className={movies ? \"App\" : \"App--loading\"}>       \r\n        {this.state.movies ?  this._renderMovies() : 'Loading'}  \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}